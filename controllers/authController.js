const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const sendOTP = require("../utils/mailer");
const OtpModel = require("../models/otpModel");
const cloudinary = require("../config/cloudinaryConfig");

const mongoose = require("mongoose");

require("dotenv").config();

exports.register = async (req, res) => {
  try {
    console.log("üì• D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body);

    const { fullName, email, phone, address, password, confirmPassword } =
      req.body;

    console.log("‚úÖ Backend nh·∫≠n ƒë∆∞·ª£c request!");

    if (
      !fullName ||
      !email ||
      !phone ||
      !address ||
      !password ||
      !confirmPassword
    ) {
      console.log("‚ùå Thi·∫øu th√¥ng tin!");
      return res
        .status(400)
        .json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    if (password !== confirmPassword) {
      console.log("‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
      return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng kh·ªõp!" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      fullName,
      email,
      phone,
      address,
      password: hashedPassword,
      // Kh√¥ng c·∫ßn th√™m avatar ·ªü ƒë√¢y, n√≥ s·∫Ω t·ª± ƒë·ªông l√† null
    });

    await newUser.save();
    console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!");
    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói server:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};
exports.login = async (req, res) => {
  try {
    console.log("Login attempt:", req.body);

    const { email, password } = req.body;
    const user = await User.findOne({ email });

    console.log("User found:", user);

    if (!user || !(await bcrypt.compare(password, user.password))) {
      console.log("Authentication failed");
      return res
        .status(400)
        .json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
    }

    // Ki·ªÉm tra JWT_SECRET c√≥ h·ª£p l·ªá kh√¥ng
    if (!process.env.JWT_SECRET) {
      console.error("JWT_SECRET ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a!");
      return res
        .status(500)
        .json({ message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau!" });
    }

    const token = jwt.sign(
      { userId: user._id, email: user.email, fullName: user.fullName },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    console.log("Login successful, token generated");

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: { id: user._id, fullName: user.fullName, email: user.email },
    });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

exports.sendOTP = async (req, res) => {
  try {
    const { email } = req.body;

    // Ki·ªÉm tra n·∫øu OTP ƒë√£ t·ªìn t·∫°i v√† ch∆∞a h·∫øt h·∫°n
    const existingOtp = await OtpModel.findOne({ email });
    if (existingOtp && existingOtp.expiresAt > Date.now()) {
      return res
        .status(400)
        .json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i, vui l√≤ng ki·ªÉm tra email!" });
    }

    // Sinh OTP m·ªõi
    const otp = Math.floor(100000 + Math.random() * 900000).toString();

    // L∆∞u OTP v√†o database (c·∫≠p nh·∫≠t n·∫øu ƒë√£ t·ªìn t·∫°i)
    await OtpModel.findOneAndUpdate(
      { email },
      { otp, expiresAt: Date.now() + 5 * 60 * 1000 },
      { upsert: true, new: true }
    );

    // G·ª≠i OTP qua email
    await sendOTP(email, otp);

    res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error });
  }
};
exports.verifyOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;

    const otpRecord = await OtpModel.findOne({ email, otp });
    if (!otpRecord)
      return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá!" });
    if (otpRecord.expiresAt < Date.now())
      return res.status(400).json({ message: "OTP ƒë√£ h·∫øt h·∫°n!" });

    // X√≥a OTP sau khi x√°c nh·∫≠n th√†nh c√¥ng
    await OtpModel.deleteOne({ email });

    res.json({ success: true, message: "X√°c nh·∫≠n OTP th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error });
  }
};
exports.resendOTP = async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá!" });
    }

    // T·∫°o OTP m·ªõi
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const otpExpires = new Date(Date.now() + 5 * 60 * 1000); // H·∫øt h·∫°n sau 5 ph√∫t

    // L∆∞u OTP v√†o b·∫£ng OtpModel (x√≥a OTP c≈© n·∫øu c√≥)
    await Otp.findOneAndUpdate(
      { email },
      { otp, otpExpires },
      { upsert: true, new: true }
    );

    // G·ª≠i OTP qua email
    await sendOTP(email, otp);

    res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email!" });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i l·∫°i OTP:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};
exports.sendForgotPasswordOTP = async (req, res) => {
  try {
    const { email } = req.body;

    // Ki·ªÉm tra email ƒë√£ ƒëƒÉng k√Ω ch∆∞a
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω!" });
    }

    // Ki·ªÉm tra n·∫øu OTP ƒë√£ t·ªìn t·∫°i v√† ch∆∞a h·∫øt h·∫°n
    const existingOtp = await OtpModel.findOne({ email });
    if (existingOtp && existingOtp.expiresAt > Date.now()) {
      return res
        .status(400)
        .json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i, vui l√≤ng ki·ªÉm tra email!" });
    }

    // Sinh OTP m·ªõi
    const otp = Math.floor(100000 + Math.random() * 900000).toString();

    // L∆∞u OTP v√†o database (c·∫≠p nh·∫≠t n·∫øu ƒë√£ t·ªìn t·∫°i)
    await OtpModel.findOneAndUpdate(
      { email },
      { otp, expiresAt: Date.now() + 5 * 60 * 1000 }, // H·∫øt h·∫°n sau 5 ph√∫t
      { upsert: true, new: true }
    );

    // G·ª≠i OTP qua email
    await sendOTP(email, otp);

    res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error });
  }
};
exports.verifyForgotPasswordOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;

    // T√¨m OTP trong database
    const otpRecord = await OtpModel.findOne({ email });
    if (
      !otpRecord ||
      otpRecord.otp !== otp ||
      otpRecord.expiresAt < Date.now()
    ) {
      return res
        .status(400)
        .json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }

    // X√≥a OTP sau khi x√°c th·ª±c th√†nh c√¥ng
    await OtpModel.deleteOne({ email });

    res.json({ message: "OTP h·ª£p l·ªá! Vui l√≤ng ti·∫øp t·ª•c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error });
  }
};
exports.resetPassword = async (req, res) => {
  try {
    const { email, newPassword } = req.body;

    if (!email || !newPassword) {
      return res
        .status(400)
        .json({ message: "Email v√† m·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc!" });
    }

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(newPassword, saltRounds);

    user.password = hashedPassword;
    await user.save();

    return res
      .status(200)
      .json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    return res
      .status(500)
      .json({ message: "L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!" });
  }
};

exports.getProfile = async (req, res) => {
  try {
    if (!req.user || !req.user._id) {
      return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!" });
    }

    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(req.user._id)) {
      return res.status(400).json({ message: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!" });
    }

    const user = await User.findById(req.user._id).select("-password");

    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    res.json(user);
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin profile:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};
exports.updateProfile = async (req, res) => {
  try {
    const { fullName, address, email, phone } = req.body;
    const userId = req.user._id;

    // T√¨m user hi·ªán t·∫°i
    const currentUser = await User.findById(userId);
    if (!currentUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    // Ki·ªÉm tra xem email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i c√≥ thay ƒë·ªïi kh√¥ng
    const isEmailChanged = email && email !== currentUser.email;
    const isPhoneChanged = phone && phone !== currentUser.phone;

    // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t
    const updateData = {};

    // Ch·ªâ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c√≥ gi√° tr·ªã
    if (fullName) updateData.fullName = fullName;
    if (address) updateData.address = address;
    if (isEmailChanged) updateData.email = email;
    if (isPhoneChanged) updateData.phone = phone;

    // Th√™m th·ªùi gian c·∫≠p nh·∫≠t
    updateData.updatedAt = new Date();

    // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    const updatedUser = await User.findByIdAndUpdate(userId, updateData, {
      new: true,
      runValidators: true,
    }).select("-password -otp");

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    res.json({ message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!", user: updatedUser });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t profile:", error);

    // Ki·ªÉm tra l·ªói tr√πng l·∫∑p email/phone
    if (error.code === 11000) {
      return res.status(400).json({
        message: "Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c!",
      });
    }

    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};
exports.updateAvatar = async (req, res) => {
  try {
    const userId = req.user.id; // L·∫•y user ID t·ª´ token (middleware auth)

    if (!req.file) {
      return res.status(400).json({ message: "Vui l√≤ng t·∫£i l√™n m·ªôt ·∫£nh!" });
    }

    // Upload ·∫£nh l√™n Cloudinary
    const result = await cloudinary.uploader.upload(req.file.path, {
      folder: "avatars",
    });

    // C·∫≠p nh·∫≠t URL avatar v√†o database
    const user = await User.findByIdAndUpdate(
      userId,
      { avatar: result.secure_url },
      { new: true }
    );

    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t avatar", error });
  }
};

exports.getAllRoomCategoriesExamPle = async (req, res) => {
  try {
    // D·ªØ li·ªáu m·∫´u cho danh m·ª•c ph√≤ng
    const roomCategories = [
      {
        name: "Ph√≤ng ƒê∆°n",
        address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
        price: 5000000,
        rating: 4.5,
        roomType: "Ph√≤ng ƒê∆°n",
        icon: "room1-icon.png",
        isActive: true,
        order: 1,
      },
      {
        name: "Ph√≤ng ƒê√¥i",
        address: "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2, TP.HCM",
        price: 7000000,
        rating: 4.7,
        roomType: "Ph√≤ng ƒê√¥i",
        icon: "room2-icon.png",
        isActive: true,
        order: 2,
      },
      {
        name: "CƒÉn H·ªô",
        address: "789 ƒê∆∞·ªùng LMN, Qu·∫≠n 3, TP.HCM",
        price: 12000000,
        rating: 4.8,
        roomType: "CƒÉn H·ªô",
        icon: "apartment-icon.png",
        isActive: true,
        order: 3,
      },
    ];

    res.json(roomCategories);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch danh m·ª•c ph√≤ng:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

exports.getTopRatedRoomsExamPle = async (req, res) => {
  try {
    // D·ªØ li·ªáu m·∫´u cho c√°c ph√≤ng ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t
    const topRatedRooms = [
      {
        name: "Ph√≤ng ƒê√¥i",
        address: "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2, TP.HCM",
        price: 7000000,
        rating: 4.7,
        roomType: "Ph√≤ng ƒê√¥i",
        icon: "room2-icon.png",
      },
      {
        name: "CƒÉn H·ªô",
        address: "789 ƒê∆∞·ªùng LMN, Qu·∫≠n 3, TP.HCM",
        price: 12000000,
        rating: 4.8,
        roomType: "CƒÉn H·ªô",
        icon: "apartment-icon.png",
      },
    ];

    if (!topRatedRooms || topRatedRooms.length === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng c√≥ ph√≤ng n√†o ƒë∆∞·ª£c ƒë√°nh gi√°!" });
    }

    res.json(topRatedRooms);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y ph√≤ng ch·∫°y nh·∫•t:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};
