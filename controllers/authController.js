const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const sendOTP = require("../utils/mailer");
const cloudinary = require("../config/cloudinary");
require("dotenv").config();
exports.register = async (req, res) => {
  try {
    console.log("üì• D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body);

    const { fullName, email, phone, address, password, confirmPassword } =
      req.body;

    console.log("‚úÖ Backend nh·∫≠n ƒë∆∞·ª£c request!");

    if (
      !fullName ||
      !email ||
      !phone ||
      !address ||
      !password ||
      !confirmPassword
    ) {
      console.log("‚ùå Thi·∫øu th√¥ng tin!");
      return res
        .status(400)
        .json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    if (password !== confirmPassword) {
      console.log("‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
      return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng kh·ªõp!" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      fullName,
      email,
      phone,
      address,
      password: hashedPassword,
      // Kh√¥ng c·∫ßn th√™m avatar ·ªü ƒë√¢y, n√≥ s·∫Ω t·ª± ƒë·ªông l√† null
    });

    await newUser.save();
    console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!");
    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói server:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

// üìå ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
  try {
    console.log("Login attempt:", req.body); // Log d·ªØ li·ªáu ƒëƒÉng nh·∫≠p
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    console.log("User found:", user); // Log th√¥ng tin user t√¨m ƒë∆∞·ª£c

    if (!user || !(await bcrypt.compare(password, user.password))) {
      console.log("Authentication failed"); // Log khi x√°c th·ª±c th·∫•t b·∫°i
      return res
        .status(400)
        .json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
    }

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
      expiresIn: "1h",
    });

    console.log("Login successful, token generated"); // Log khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", token });
  } catch (error) {
    console.error("Login error:", error); // Log chi ti·∫øt l·ªói
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

// üìå G·ª≠i OTP
exports.sendOTP = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    user.otp = otp;
    user.otpExpires = new Date(Date.now() + 5 * 60 * 1000); // H·∫øt h·∫°n sau 5 ph√∫t
    await user.save();

    await sendOTP(email, otp);

    res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error });
  }
};

// üìå X√°c th·ª±c OTP
exports.verifyOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;
    const user = await User.findOne({ email });

    if (!user || user.otp !== otp || user.otpExpires < new Date()) {
      return res
        .status(400)
        .json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }

    user.otp = null;
    user.otpExpires = null;
    await user.save();

    res.json({ message: "X√°c th·ª±c OTP th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error });
  }
};
exports.getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).select("-password -otp");
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }
    res.json(user);
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin profile:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

exports.updateProfile = async (req, res) => {
  try {
    const { fullName, address } = req.body;
    const updatedUser = await User.findByIdAndUpdate(
      req.user.userId,
      { fullName, address },
      { new: true, runValidators: true }
    ).select("-password -otp");

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    res.json({ message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!", user: updatedUser });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t profile:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

exports.updateAvatar = async (req, res) => {
  try {
    if (!req.file) {
      return res
        .status(400)
        .json({ message: "Kh√¥ng c√≥ file ·∫£nh ƒë∆∞·ª£c t·∫£i l√™n!" });
    }

    const result = await cloudinary.uploader.upload(req.file.path, {
      folder: "avatars",
      width: 200,
      crop: "scale",
    });

    const updatedUser = await User.findByIdAndUpdate(
      req.user.userId,
      { avatar: result.secure_url },
      { new: true }
    ).select("-password -otp");

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    res.json({ message: "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng!", user: updatedUser });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t avatar:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};
exports.sendChangeEmailOTP = async (req, res) => {
  try {
    const { newEmail } = req.body;
    const userId = req.user.userId;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    const existingUser = await User.findOne({ email: newEmail });
    if (existingUser) {
      return res
        .status(400)
        .json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c!" });
    }

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    user.otp = {
      code: otp,
      type: "email",
      expires: new Date(Date.now() + 10 * 60 * 1000), // OTP h·∫øt h·∫°n sau 10 ph√∫t
    };
    await user.save();

    await sendOTP(newEmail, otp);

    res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email m·ªõi!" });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i OTP thay ƒë·ªïi email:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

exports.verifyAndChangeEmail = async (req, res) => {
  try {
    const { newEmail, otp } = req.body;
    const userId = req.user.userId;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    if (
      !user.otp ||
      user.otp.code !== otp ||
      user.otp.type !== "email" ||
      user.otp.expires < new Date()
    ) {
      return res
        .status(400)
        .json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }

    user.email = newEmail;
    user.isEmailVerified = true;
    user.otp = undefined;
    await user.save();

    res.json({
      message: "Email ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!",
      email: newEmail,
    });
  } catch (error) {
    console.error("L·ªói khi x√°c th·ª±c v√† thay ƒë·ªïi email:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

exports.sendChangePhoneOTP = async (req, res) => {
  try {
    const { newPhone } = req.body;
    const userId = req.user.userId;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    const existingUser = await User.findOne({ phone: newPhone });
    if (existingUser) {
      return res
        .status(400)
        .json({ message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c!" });
    }

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    user.otp = {
      code: otp,
      type: "phone",
      expires: new Date(Date.now() + 10 * 60 * 1000), // OTP h·∫øt h·∫°n sau 10 ph√∫t
    };
    await user.save();

    // G·ª≠i OTP qua SMS (c·∫ßn tri·ªÉn khai)
    // V√≠ d·ª•: await sendSMS(newPhone, otp);
    console.log(`G·ª≠i OTP ${otp} ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i ${newPhone}`);

    res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i m·ªõi!" });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i OTP thay ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

exports.verifyAndChangePhone = async (req, res) => {
  try {
    const { newPhone, otp } = req.body;
    const userId = req.user.userId;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    if (
      !user.otp ||
      user.otp.code !== otp ||
      user.otp.type !== "phone" ||
      user.otp.expires < new Date()
    ) {
      return res
        .status(400)
        .json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }

    user.phone = newPhone;
    user.isPhoneVerified = true;
    user.otp = undefined;
    await user.save();

    res.json({
      message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!",
      phone: newPhone,
    });
  } catch (error) {
    console.error("L·ªói khi x√°c th·ª±c v√† thay ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};
