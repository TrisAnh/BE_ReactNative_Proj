const Viewing = require("../models/Viewing"); // M√¥ h√¨nh l·ªãch xem ph√≤ng
const RoomCategory = require("../models/roomCategory"); // M√¥ h√¨nh ph√≤ng
const { sendConfirmationEmail } = require("../utils/mailer");
exports.createViewing = async (req, res) => {
  try {
    console.log("D·ªØ li·ªáu ƒë·∫ßu v√†o:", req.body); // In ƒë·∫ßu v√†o ra ƒë·ªÉ ki·ªÉm tra

    const { roomId, customerName, customerEmail, customerPhone, viewDate } =
      req.body;
    if (!roomId) {
      return res.status(400).json({ message: "Ph√≤ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }
    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ng√†y xem ph√≤ng
    const currentDate = new Date();
    const requestedDate = new Date(viewDate);

    // Ki·ªÉm tra xem ng√†y xem c√≥ ph·∫£i l√† ng√†y trong t∆∞∆°ng lai kh√¥ng
    if (requestedDate <= currentDate) {
      return res
        .status(400)
        .json({ message: "Ng√†y xem ph√≤ng ph·∫£i l√† ng√†y trong t∆∞∆°ng lai" });
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng viewDate
    if (isNaN(requestedDate.getTime())) {
      return res.status(400).json({ message: "Ng√†y xem ph√≤ng kh√¥ng h·ª£p l·ªá" });
    }

    // Ki·ªÉm tra th√¥ng tin ƒë·∫ßu v√†o
    if (
      !roomId ||
      !customerName ||
      !customerEmail ||
      !customerPhone ||
      !viewDate
    ) {
      return res
        .status(400)
        .json({ message: "T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu ph·∫£i ƒë∆∞·ª£c ƒëi·ªÅn ƒë·∫ßy ƒë·ªß" });
    }

    // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
    const room = await RoomCategory.findById(roomId);
    if (!room) {
      return res.status(404).json({ message: "Ph√≤ng kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra n·∫øu c√≥ l·ªãch xem ph√≤ng tr√πng v·ªõi th·ªùi gian y√™u c·∫ßu
    const existingViewing = await Viewing.findOne({
      roomId: roomId,
      viewDate: {
        $gte: new Date(viewDate).setHours(0, 0, 0, 0), // B·∫Øt ƒë·∫ßu t·ª´ ƒë·∫ßu ng√†y
        $lt: new Date(viewDate).setHours(23, 59, 59, 999), // K·∫øt th√∫c v√†o cu·ªëi ng√†y
      },
    });

    if (existingViewing) {
      return res
        .status(400)
        .json({ message: "Ph√≤ng ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t l·ªãch xem v√†o th·ªùi gian n√†y" });
    }

    // T·∫°o l·ªãch xem ph√≤ng m·ªõi
    const viewing = new Viewing({
      roomId,
      customerName,
      customerEmail,
      customerPhone,
      viewDate,
      status: "pending", // M·ªõi t·∫°o, ch∆∞a x√°c nh·∫≠n
    });

    await viewing.save();

    // G·ª≠i email x√°c nh·∫≠n
    sendConfirmationEmail(customerEmail, { customerName, viewDate });

    res.status(201).json({ message: "ƒê·∫∑t l·ªãch xem ph√≤ng th√†nh c√¥ng", viewing });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o l·ªãch xem ph√≤ng:", error);
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};
exports.getAllViewings = async (req, res) => {
  console.log("üî• API getAllViewings ƒë∆∞·ª£c g·ªçi");
  try {
    const viewings = await Viewing.find().populate("roomId");
    res.status(200).json(viewings);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
exports.updateViewing = async (req, res) => {
  try {
    const { id } = req.params;
    const { customerName, customerEmail, customerPhone, viewDate, status } =
      req.body;

    const updatedViewing = await Viewing.findByIdAndUpdate(
      id,
      { customerName, customerEmail, customerPhone, viewDate, status },
      { new: true }
    );

    if (!updatedViewing) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch xem ph√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t" });
    }

    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", updatedViewing });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
exports.deleteViewing = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await Viewing.findByIdAndDelete(id);

    if (!deleted) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch xem ph√≤ng ƒë·ªÉ x√≥a" });
    }

    res.status(200).json({ message: "X√≥a th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
exports.getViewingById = async (req, res) => {
  try {
    const { id } = req.params;
    const viewing = await Viewing.findById(id).populate("roomId");

    if (!viewing) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch xem ph√≤ng" });
    }

    res.status(200).json(viewing);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};
